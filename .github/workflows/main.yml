name: Release Creation

on:
  release:
    types: [ published ]

env:
  package_name: "Item Piles: Starfinder 1e"
  package_id: itempiles-sf1e

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      # Substitute the Manifest and Download URLs in the module.json
      # for a FULL RELEASE
      - name: Substitute Manifest and Download Links For Versioned Ones
        if: "!github.event.release.prerelease"
        id: sub_release_manifest_version
        uses: microsoft/variable-substitution@v1
        with:
          files: 'module.json'
        env:
          version: ${{github.event.release.tag_name}}
          url: https://github.com/${{github.repository}}
          manifest: https://github.com/${{github.repository}}/releases/latest/download/module.json
          download: https://github.com/${{github.repository}}/releases/download/${{github.event.release.tag_name}}/module.zip

      # Substitute the Manifest and Download URLs in the module.json
      # for a PRE RELEASE. Manifest pointing to live module.json on branch,
      # which is updated after tag.
      - name: Substitute Manifest and Download Links For Versioned Ones
        if: "github.event.release.prerelease"
        id: sub_prerelease_manifest_version
        uses: microsoft/variable-substitution@v1
        with:
          files: 'module.json'
        env:
          version: ${{github.event.release.tag_name}}
          url: https://github.com/${{github.repository}}
          manifest: https://raw.githubusercontent.com/${{github.repository}}/next/module.json
          download: https://github.com/${{github.repository}}/releases/download/${{github.event.release.tag_name}}/module.zip

      # Create a zip file with all files required by the module to add to the release
      - run: zip -r ./module.zip module.json LICENSE module.js

      # Create a release for this specific version
      - name: Update Release with Files
        if: "!github.event.release.prerelease"
        id: create_version_release
        uses: ncipollo/release-action@v1
        with:
          allowUpdates: true # Set this to false if you want to prevent updating existing releases
          name: ${{ github.event.release.name }}
          draft: false
          prerelease: false
          token: ${{ secrets.GITHUB_TOKEN }}
          artifacts: './module.json, ./module.zip'
          tag: ${{ github.event.release.tag_name }}
          body: ${{ github.event.release.body }}

      - name: Get Compatibility
        if: "!github.event.release.prerelease"
        run: |
          echo 'COMPATIBILITY<<EOF' >> $GITHUB_ENV
          cat module.json | jq .compatibility >> $GITHUB_ENV
          echo 'EOF' >> $GITHUB_ENV

      - name: Send package to foundry
        if: "!github.event.release.prerelease"
        run: |
          HTTP_RESPONSE=$(curl --silent --write-out "HTTPSTATUS:%{http_code}" -X POST 'https://api.foundryvtt.com/_api/packages/release_version/' \
          --header 'Authorization: ${{ secrets.PACKAGE_TOKEN }}' \
          --header 'Content-Type: application/json' \
          --data '{
              "id": "${{env.package_id}}",
              "release": {
                  "version": "${{ github.event.release.tag_name }}",
                  "manifest": "https://github.com/${{github.repository}}/releases/download/${{github.event.release.tag_name}}/module.json",
                  "notes": "https://github.com/${{github.repository}}/releases/tag/${{github.event.release.tag_name}}",
                  "compatibility": ${{ env.COMPATIBILITY }}
              }
          }')
          
          # extract the body
          HTTP_BODY=$(echo $HTTP_RESPONSE | sed -e 's/HTTPSTATUS\:.*//g')
          
          # extract the status
          HTTP_STATUS=$(echo $HTTP_RESPONSE | tr -d '\n' | sed -e 's/.*HTTPSTATUS://')
          
          # print the body
          echo "$HTTP_BODY"
          
          # example using the status
          if [ ! $HTTP_STATUS -eq 200  ]; then
            echo "Error [HTTP status: $HTTP_STATUS]"
            exit 1
          fi          